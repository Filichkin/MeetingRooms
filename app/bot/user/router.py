from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.router import Router
from aiogram_dialog import DialogManager, StartMode
from pydantic import create_model
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.booking.state import BookingState
from app.bot.user.kbs import main_user_kb, user_booking_kb, cancel_book_kb
from app.bot.user.schemas import SUser
from app.config import broker
from app.dao.dao import UserDAO, BookingDAO


router = Router()


@router.message(CommandStart())
async def cmd_start(
    message: Message,
    session_with_commit: AsyncSession,
    state: FSMContext
):
    await state.clear()
    user_data = message.from_user
    user_id = user_data.id
    user_info = await UserDAO(
        session_with_commit
        ).find_one_or_none_by_id(user_id)
    if user_info is None:
        user_schema = SUser(
            id=user_id,
            first_name=user_data.first_name,
            last_name=user_data.last_name,
            username=user_data.username
            )
        await UserDAO(session_with_commit).add(user_schema)
    text = ('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é üõó\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤ üî¢')
    await message.answer(text, reply_markup=main_user_kb(user_id))


@router.callback_query(F.data == 'about_us')
async def cmd_about(call: CallbackQuery):
    await call.answer('–û —Å–µ—Ä–≤–∏—Å–µ')
    about_text = ('üñ•Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö')
    await call.message.edit_text(
        about_text,
        reply_markup=main_user_kb(call.from_user.id)
        )


@router.callback_query(F.data == 'book_meeting_room')
async def start_dialog(call: CallbackQuery, dialog_manager: DialogManager):
    await call.answer('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π')
    await dialog_manager.start(
        state=BookingState.count,
        mode=StartMode.RESET_STACK
        )


@router.callback_query(F.data == 'my_bookings')
async def show_my_bookings(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    user_filter = create_model(
        'UserIDModel',
        user_id=(int, ...)
        )(user_id=call.from_user.id)
    my_bookings = await BookingDAO(
        session_without_commit
        ).find_all(user_filter)
    count_booking = len(my_bookings)
    if count_booking:
        book = True
        text = (
            f'–û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å {count_booking} '
            f'–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö. \n\n'
            f'–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, '
            f'–æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.'
            )
    else:
        book = False
        text = ('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. \n\n'
                '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, '
                '–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.'
                )
    await call.message.edit_text(
        text,
        reply_markup=user_booking_kb(call.from_user.id, book)
        )


@router.callback_query(F.data == 'my_booking_all')
async def show_all_my_bookings(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–ú–æ–∏ –±—Ä–æ–Ω–∏')
    user_bookings = await BookingDAO(
        session_without_commit
        ).get_bookings_with_details(call.from_user.id)

    if not user_bookings:
        await call.message.edit_text(
            '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.',
            reply_markup=None
            )
        return

    for i, booking in enumerate(user_bookings):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        booking_date = booking.date.strftime('%d.%m.%Y')  # –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥
        start_time = booking.time_slot.start_time
        end_time = booking.time_slot.end_time
        booking_number = i + 1
        status = booking.status
        cancel = False
        home_page = False
        if status == 'booked':
            cancel = True
            status_text = '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ'
        elif status == 'canceled':
            status_text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
        else:
            status_text = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
        message_text = (
            f'<b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ{booking_number}:</b>\n\n'
            f'üìÖ <b>–î–∞—Ç–∞:</b> {booking_date}\n'
            f'üïí <b>–í—Ä–µ–º—è:</b> {start_time} - {end_time}\n'
            f'üñ•Ô∏è <b>–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è:</b> {booking.meeting_room.name}, '
            f'–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {booking.meeting_room.capacity}\n'
            f'‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {booking.meeting_room.description}\n'
            f'üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n'
            )
        if booking_number == len(user_bookings):
            home_page = True
        await call.message.answer(
            message_text,
            reply_markup=cancel_book_kb(booking.id, cancel, home_page)
            )


@router.callback_query(F.data.startswith('cancel_book_'))
async def cancel_booking(
    call: CallbackQuery,
    session_with_commit: AsyncSession
):
    book_id = int(call.data.split('_')[-1])
    booking_dao = BookingDAO(session_with_commit)
    await booking_dao.cancel_book(book_id)
    await call.answer('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!', show_alert=True)
    await broker.publish(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏ —Å ID {book_id}',
        'admin_msg'
        )
    await call.message.edit_reply_markup(reply_markup=cancel_book_kb(book_id))


@router.callback_query(F.data.startswith('dell_book_'))
async def delete_booking(
    call: CallbackQuery,
    session_with_commit: AsyncSession
):
    book_id = int(call.data.split('_')[-1])
    await BookingDAO(session_with_commit).delete_book(book_id)
    await call.answer('–ó–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∞!', show_alert=True)
    await broker.publish(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∑–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å ID {book_id}',
        'admin_msg'
        )
    await call.message.delete()


@router.callback_query(F.data == 'back_home')
async def back_home(call: CallbackQuery):
    await call.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await call.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=main_user_kb(call.from_user.id)
        )
